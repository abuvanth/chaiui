var bs = {}; // namespace

HTMLElement.prototype.onEvent = function (eventType, callBack, useCapture) {
    this.addEventListener(eventType, callBack, useCapture);
    if (!this.myListeners) {
        this.myListeners = [];
    };
    this.myListeners.push({ eType: eventType, callBack: callBack });
    return this;
};


HTMLElement.prototype.removeListeners = function (evt) {
    if (this.myListeners) {
        for (var i = 0; i < this.myListeners.length; i++) {
            if (evt === undefined) {
                this.removeEventListener(this.myListeners[i].eType, this.myListeners[i].callBack);
            } else {
                this.removeEventListener(evt, this.myListeners[i].callBack);
            }
        };
        delete this.myListeners;
    };
};
!function (bs) {
    bs._select = function(sel) {
        var _self = this;
        if (sel instanceof HTMLElement) {
            this.element = sel;
        } else {
            this.element = document.querySelector(sel);
        }

        // return the html if no argument passed or set html
        this.html = function(s) {
            if (s === undefined) { return this.element.innerHTML; }
            this.element.innerHTML = s;
            return this;
        };

        // get the selected element
        this.get = function() { return this.element; };

        // append and prepend helper method
        function helper_appendPrepend(el, is_append) {
            if (typeof el === "string") {
                var parser = new DOMParser();
                var doc = parser.parseFromString(el, "text/html");
                el = doc.getElementsByTagName('body')[0].childNodes;
            } else {
                el = [el];
            }


            for (var i = 0; i < el.length; i++) {
                var tmp = el[i].cloneNode(true);
                if (is_append) {
                    _self.element.appendChild(tmp);
                } else {
                    _self.element.insertBefore(tmp, _self.element.firstChild);
                }
            }

            return _self;
        }


        // append to selected element
        this.append = function(el) {
            return helper_appendPrepend(el, true);
        };

        // prepend to selected element
        this.prepend = function(el) {
            return helper_appendPrepend(el, false);
        };


        // bind one or more events to selected element
        this.on = function() {
            var callback = arguments[arguments.length - 1];
            for (var i = 0; i < arguments.length - 1; i++) {
                this.element.onEvent(arguments[i], callback, false);
            }
            return this;
        };

        // bind an event to selected element
        this.bind = function(evt, callback) {
            this.element.onEvent(evt, callback, false);
            return this;
        };

        // addclass to selected element
        this.addClass = function(cls) {
            if (!this.element.classList.contains(cls) && cls !== undefined) {
                this.element.classList.add(cls);
            }
            return this;
        };

        // addclass to selected element
        this.removeClass = function(cls) {
            if (this.element.classList.contains(cls) && cls !== undefined) {
                this.element.classList.remove(cls);
            }
            return this;
        };

        // toggle class to selected element
        this.toggleClass = function(cls) {
            if (cls !== undefined) {
                if (this.element.classList.contains(cls)) {
                    this.element.classList.remove(cls);
                } else {
                    this.element.classList.add(cls);
                }
            }
            return this;
        };

        // select all siblings and pass it to selectAll method
        this.siblings = function() {
            var elem = this.element.parentNode.firstChild;
            var sibs = [];
            while (elem = elem.nextSibling) {
                if (elem.nodeType === 3) continue; // text node
                if (elem !== this.element) sibs.push(elem);
            }
            return bs.selectAll(sibs);
        };

        // return all children as selectAll object
        this.children = function() {
            return bs.selectAll(this.element.children);
        };

        // return height of selected element
        this.height = function() {
            return this.element.clientHeight;
        };

        // return width of selected element
        this.width = function() {
            return this.element.clientWidth;
        };

        // trigger an event that added to the element
        this.trigger = function(evt) {
            var event = new Event(evt);
            this.element.dispatchEvent(event);
            return this;
        };

        // remove and event to selected element
        this.unbind = function(evt) {
            this.element.removeListeners(evt);
            return this;
        };

        // set or get value
        this.val = function(s) {
            if (s === undefined) { return this.element.value; }
            this.element.value = s;
            return this;
        };

        // get selected element coords
        this.offset = function() {
            var coords = {};
            coords.left = this.element.offsetLeft;
            coords.top = this.element.offsetTop;
            return coords;
        };

        // remove selected element
        this.remove = function(sel) {
            if (sel !== undefined) {
                var doc = document.createElement("div");
                doc.appendChild(this.element.cloneNode(true));
                var el = doc.querySelector(sel);
                if (el !== null) {
                    this.element.parentElement.removeChild(this.element);
                }
            } else {
                this.element.parentElement.removeChild(this.element);
            }
            return this;
        };

        // set or get attribute
        this.attr = function(key, val) {
            if (val === undefined) { return this.element.getAttribute(key); };
            this.element.setAttribute(key, val);
            return this;
        };

        // remove an attribute from selected element
        this.removeAttr = function(key) {
            this.element.removeAttribute(key);
            return this;
        };

        // add css to selected element
        this.css = function(styles) {
            var keys = Object.keys(styles);
            for (var i = 0; i < keys.length; i++) {
                this.element.style[keys[i]] = styles[keys[i]];
            }
            return this;
        };

        // replace with given content
        this.replaceWith = function(content) {
            if (content instanceof HTMLElement || content instanceof Node) {
                this.element.parentElement.replaceChild(content, this.element);
            } else {
                var parser = new DOMParser();
                var doc = parser.parseFromString(content, "text/html");
                content = doc.getElementsByTagName('body')[0].firstChild;
                this.element.parentElement.replaceChild(content, this.element);
            }
            this.element = content;
            return this;
        };

        // check if the element has given class
        this.hasClass = function(cls) {
            return this.element.contains(cls);
        };
    };

    bs.select = function(el) {
        return new bs._select(el);
    };
}(bs);
!function (bs) {
    bs._selectAll = function(sel) {
        this.elements = [];


        if (sel instanceof Array || sel instanceof HTMLCollection || sel instanceof NodeList) {
            this.elements = sel;
        } else {
            this.elements = document.querySelectorAll(sel);
        }

        // set html to all selected elements or get html of first elment
        this.html = function(s) {
            if (s === undefined) {
                return this.elements[0].innerHTML;
            } else {
                for (var i = 0; i < this.elements.length; i++) {
                    this.elements[i].innerHTML = s;
                }
            }
            return this;
        };

        // get element by given index
        this.get = function(i) {
            if (i === undefined) { i = 0; }
            return this.elements[i];
        };

        // loop through each element
        this.each = function(callback) {
            for (var i = 0; i < this.elements.length; i++) {
                callback(bs.select(this.elements[i]));
            }
            return this;
        };

        // bind an event to selected elements
        this.bind = function(evt, callback) {
            this.each(function(el) {
                el.bind(evt, callback);
            });
            return this;
        };

        // bind multiple events to selected elements
        this.on = function() {
            var _self = this;
            var callback = arguments[arguments.length - 1];
            for (var i = 0; i < _self.elements.length; i++) {
                for (var j = 0; j < arguments.length; j++) {
                    _self.elements[i].onEvent(arguments[j], callback, false);
                }
            }
            return this;
        };

        // append element(s) to selected elements
        this.append = function(el) {
            for (var i = 0; i < this.elements.length; i++) {
                bs.select(this.elements[i]).append(el);
            }
            return this;
        };

        // prepend element(s) to selected elements
        this.prepend = function(el) {
            for (var i = 0; i < this.elements.length; i++) {
                bs.select(this.elements[i]).prepend(el);
            }
            return this;
        };

        // addclass to selected element
        this.addClass = function(cls) {
            for (var i = 0; i < this.elements.length; i++) {
                bs.select(this.elements[i]).addClass(cls);
            }
            return this;
        };

        // addclass to selected element
        this.removeClass = function(cls) {
            for (var i = 0; i < this.elements.length; i++) {
                bs.select(this.elements[i]).removeClass(cls);
            }
            return this;
        };

        // toggle class to selected element
        this.toggleClass = function(cls) {
            for (var i = 0; i < this.elements.length; i++) {
                bs.select(this.elements[i]).toggleClass(cls);
            }
            return this;
        };

        // return number of element in the elements
        this.size = function() {
            return this.elements.length;
        };

        // trigger an event that attached to selected elements
        this.trigger = function(evt) {
            for (var i = 0; i < this.elements.length; i++) {
                bs.select(this.elements[i]).trigger(evt);
            }
            return this;
        };

        // remove event to selected elements
        this.unbind = function(evt) {
            for (var i = 0; i < this.elements.length; i++) {
                bs.select(this.elements[i]).unbind(evt);
            }
            return this;
        };

        // set value to all elements or get value of first element
        this.val = function(s) {
            if (s === undefined) {
                for (var i = 0; i < this.elements.length; i++) {
                    bs.select(this.elements[i]).val(s);
                }
            } else {
                return this.elements[0].value;
            }
            return this;
        };

        // remove matched elements
        this.remove = function(sel) {
            if (sel !== undefined) {
                for (var i = 0; i < this.elements.length; i++) {
                    var doc = document.createElement("div");
                    doc.appendChild(this.elements[i].cloneNode(true));
                    var el = doc.querySelector(sel);
                    if (el !== null) {
                        this.elements[i].parentElement.removeChild(this.elements[i]);
                    }
                }
            } else {
                for (var i = 0; i < this.elements.length; i++) {
                    this.elements[i].parentElement.removeChild(this.elements[i]);
                }
            }
            return this;
        };

        // set attribute to all selected element or get attribute from first element
        this.attr = function(key, val) {
            if (val === undefined) { return this.elements[0].getAttribute(key); }
            for (var i = 0; i < this.elements.length; i++) {
                this.elements[i].setAttribute(key, val);
            }
        };

        // remove an attribute from selected elements
        this.removeAttr = function(key) {
            for (var i = 0; i < this.elements.length; i++) {
                this.elements[i].removeAttribute(key);
            }
            return this;
        };

        // find elements from selected elements
        this.find = function(sel) {
            var tmp = new Array();
            if (sel !== undefined) {
                for (var i = 0; i < this.elements.length; i++) {
                    var doc = document.createElement("div");
                    doc.appendChild(this.elements[i].cloneNode(true));
                    var el = doc.querySelector(sel);
                    if (el !== null) {
                        tmp.push(this.elements[i])
                    }
                }
                this.elements = tmp;
            }
            return this;
        };

        // add css to selected elements
        this.css = function(styles) {
            for (var i = 0; i < this.elements.length; i++) {
                bs.select(this.elements[i]).css(styles);
            }
            return this;
        };

        // replace selected elements with given content
        this.replaceWith = function(content) {
            var tmp = [];
            for (var i = 0; i < this.elements.length; i++) {
                var el = bs.select(this.elements[i]);
                el.replaceWith(content);
                tmp.push(el.element);
            }
            this.elements = tmp;
            return this;
        };

        // add more elements to selcted elements with selctor
        this.add = function(sel) {
            var els = document.querySelectorAll(sel);
            var tmp = [];
            for (var j = 0; j < els.length; j++) {
                for (var i = 0; i < this.elements.length; i++) {
                    if (els[j] !== this.elements[i]) {
                        tmp.push(els[j]);
                    }
                }
            }
            for (var j = 0; j < tmp.length; j++) {
                this.elements.push(tmp[j]);
            }
            console.log(this.elements);
            return this;
        };
    };

    bs.selectAll = function(sel) {
        return new bs._selectAll(sel);
    };
}(bs);
//# sourceMappingURL=base.js.map
